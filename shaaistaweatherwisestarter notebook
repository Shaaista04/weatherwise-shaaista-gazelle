
{
  "cells": [
    {
      "cell_type": "markdown",
      "id": "410fdcf8",
      "metadata": {
        "id": "410fdcf8"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/michael-borck/weatherwise-template/blob/main/starter_notebook.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "72e78a05",
      "metadata": {
        "id": "72e78a05"
      },
      "source": [
        "# üå¶Ô∏è WeatherWise ‚Äì Starter Notebook\n",
        "\n",
        "Welcome to  **WeatherWise** project notebook! This is a python-based app designed to help users build an app for weather advise, have better visuals, and included AI for better development.\n",
        "\n",
        "---\n",
        "\n",
        "üìÑ ** Access to Full Assignment Specification**  \n",
        "See [`ASSIGNMENT.md`](ASSIGNMENT.md) or check the LMS for full details.\n",
        "\n",
        "üìù **Quick Refresher**  \n",
        "A one-page summary is available in [`resources/assignment-summary.md`](resources/assignment-summary.md).\n",
        "\n",
        "---\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "fa8c7f6c",
      "metadata": {
        "id": "fa8c7f6c"
      },
      "source": [
        "## üß∞ Setup and Imports\n",
        "\n",
        "This section imports commonly used packages and installs any other tools used in this project.\n",
        "\n",
        "\n",
        "- The notebook assumes the following packages are **pre-installed** in the provided environment or installable via pip:\n",
        "  - `requests`, `matplotlib`, `pyinputplus`\n",
        "  - `fetch-my-weather` (for accessing weather data more easier)\n",
        "  - `hands-on-ai` (for loggin in AI, to make comparisons, or prompting tools)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "70c3f3f1",
      "metadata": {
        "id": "70c3f3f1"
      },
      "outputs": [],
      "source": [
        "\n",
        "!pip install fetch-my-weather\n",
        "!pip install hands-on-ai\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "B2JKlJfrGgIb",
      "metadata": {
        "id": "B2JKlJfrGgIb"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "\n",
        "os.environ['HANDS_ON_AI_SERVER'] = 'http://ollama.serveur.au'\n",
        "os.environ['HANDS_ON_AI_MODEL'] = 'granite3.2'\n",
        "os.environ['HANDS_ON_AI_API_KEY'] = input('Enter your API key: ')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "[\n",
        "    \"## üì¶ Setup and Configuration\\n\",\n",
        "    \"Import required packages and setup environment.\"\n",
        "   ]\n"
      ],
      "metadata": {
        "id": "r7pxMR3C2pk_"
      },
      "id": "r7pxMR3C2pk_"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f1dd051e",
      "metadata": {
        "id": "f1dd051e"
      },
      "outputs": [],
      "source": [
        "import requests\n",
        "import matplotlib.pyplot as plt\n",
        "import pyinputplus as pyip\n",
        "\n",
        "from fetch_my_weather import get_weather\n",
        "from hands_on_ai.chat import get_response\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "f736ade3",
      "metadata": {
        "id": "f736ade3"
      },
      "source": [
        "## üå§Ô∏è Weather Data Functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5af8e8a0",
      "metadata": {
        "id": "5af8e8a0"
      },
      "outputs": [],
      "source": [
        "\n",
        "def get_weather_data(location, forecast_days=5):\n",
        "    from fetch_my_weather import get_weather\n",
        "    try:\n",
        "        data = get_weather(location, days=forecast_days)\n",
        "        return data\n",
        "    except Exception as e:\n",
        "        print(f\"Error retrieving weather data: {e}\")\n",
        "        return None\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "8a744fdc",
      "metadata": {
        "id": "8a744fdc"
      },
      "source": [
        "## üìä Visualisation Functions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "8212dce4",
      "metadata": {
        "id": "8212dce4"
      },
      "outputs": [],
      "source": [
        "\n",
        "def create_temperature_visualisation(weather_data, output_type='display'):\n",
        "    import matplotlib.pyplot as plt\n",
        "    dates = [day['date'] for day in weather_data['forecast']]\n",
        "    temps = [day['temperature'] for day in weather_data['forecast']]\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.plot(dates, temps, marker='o')\n",
        "    ax.set_title(\"Temperature Forecast\")\n",
        "    ax.set_ylabel(\"Temperature (¬∞C)\")\n",
        "    ax.set_xlabel(\"Date\")\n",
        "    plt.xticks(rotation=45)\n",
        "    if output_type == 'figure':\n",
        "        return fig\n",
        "    plt.show()\n",
        "\n",
        "def create_precipitation_visualisation(weather_data, output_type='display'):\n",
        "    import matplotlib.pyplot as plt\n",
        "    dates = [day['date'] for day in weather_data['forecast']]\n",
        "    rain = [day['precipitation'] for day in weather_data['forecast']]\n",
        "    fig, ax = plt.subplots()\n",
        "    ax.bar(dates, rain)\n",
        "    ax.set_title(\"Precipitation Forecast\")\n",
        "    ax.set_ylabel(\"Precipitation (mm)\")\n",
        "    ax.set_xlabel(\"Date\")\n",
        "    plt.xticks(rotation=45)\n",
        "    if output_type == 'figure':\n",
        "        return fig\n",
        "    plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "HpOlQylYG5Ho",
      "metadata": {
        "id": "HpOlQylYG5Ho"
      },
      "outputs": [],
      "source": [
        "\n",
        "def create_precipitation_visualisation(weather_data, output_type='display'):\n",
        "    \"\"\"\n",
        "    Create visualisation of precipitation data.\n",
        "\n",
        "    Args:\n",
        "        weather_data (dict): The processed weather data\n",
        "        output_type (str): Either 'display' to show in notebook or 'figure' to return the figure\n",
        "\n",
        "    Returns:\n",
        "        If output_type is 'figure', returns the matplotlib figure object\n",
        "        Otherwise, displays the visualisation in the notebook\n",
        "    \"\"\"\n",
        "    pass"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "9f95d160",
      "metadata": {
        "id": "9f95d160"
      },
      "source": [
        "## ü§ñ Natural Language Processing"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "45b568ef",
      "metadata": {
        "id": "45b568ef"
      },
      "outputs": [],
      "source": [
        "\n",
        "def parse_weather_question(question):\n",
        "    from hands_on_ai.chat import get_response\n",
        "    prompt = f\"Extract location and forecast details from this question: '{question}'\"\n",
        "    parsed = get_response(prompt)\n",
        "    return parsed\n",
        "\n",
        "def generate_weather_response(parsed_question, weather_data):\n",
        "    from hands_on_ai.chat import get_response\n",
        "    context = f\"User asked about weather in {parsed_question['location']} for {parsed_question.get('days', 3)} days.\"\n",
        "    return get_response(f\"{context}. Use the following data: {weather_data}\")\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "0d85225e",
      "metadata": {
        "id": "0d85225e"
      },
      "source": [
        "## üß≠ User Interface"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "83007fa2",
      "metadata": {
        "id": "83007fa2"
      },
      "outputs": [],
      "source": [
        "\n",
        "def user_menu():\n",
        "    location = input(\"Enter your location: \")\n",
        "    days = int(input(\"Forecast days (1-5): \"))\n",
        "    weather_data = get_weather_data(location, forecast_days=days)\n",
        "    create_temperature_visualisation(weather_data)\n",
        "    create_precipitation_visualisation(weather_data)\n",
        "    question = input(\"Ask a weather question: \")\n",
        "    parsed = parse_weather_question(question)\n",
        "    response = generate_weather_response(parsed, weather_data)\n",
        "    print(\"\\nWeather Response:\", response)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "d643a53c",
      "metadata": {
        "id": "d643a53c"
      },
      "source": [
        "## üß© Main Application Logic"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a9e2e805",
      "metadata": {
        "id": "a9e2e805"
      },
      "outputs": [],
      "source": [
        "\n",
        "def generate_weather_response(parsed_question, weather_data):\n",
        "    \"\"\"\n",
        "    Generate a natural language response to a weather question.\n",
        "\n",
        "    Args:\n",
        "        parsed_question (dict): Parsed question data\n",
        "        weather_data (dict): Weather data\n",
        "\n",
        "    Returns:\n",
        "        str: Natural language response\n",
        "    \"\"\"\n",
        "    pass"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "language_info": {
      "name": "python"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
